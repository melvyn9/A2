#1
import turtle
canvas = turtle.Screen()
canvas.setup(600, 600)
t = turtle.Turtle()
t.penup()
t.pendown()
t.speed(20)

def koch(t, order, size):
    if order == 0:
        t.forward(size)
    else:
        koch(t, order-1, size/3)
        t.left(60)
        koch(t, order-1, size/3)
        t.right(120)
        koch(t, order-1, size/3)
        t.left(60)
        koch(t, order-1, size/3)

for i in range(3):
    koch(t,2,100)
    t.right(120)
    
#3
ef triangle(t,order,size):
    t.setheading(60)
    if order == 0:
        for i in range(3):
            t.fd(size)
            t.right(120)
    else:
        triangle(t,order-1,size/2)
        t.fd(size/2)
        triangle(t,order-1,size/2)
        t.bk(size/2)
        t.right(60)
        t.fd(size/2)
        t.left(60)
        triangle(t,order-1,size/2)
        t.right(60)
        t.bk(size/2)
        t.left(60)
#triangle(turt,5,300)
    
#5
def Minimum(List):
    min = 1000000000000000000000000000000000
    list = separate(List)
    for i in list:
        if i < min:
            min = i
        return(i)
        
#6
def recursive(a, list):
    count = 0
    for i in list:
        try:
            i = int(i)
            if i == a:
                count += 1
        except TypeError:
            value = recursive(a, i)
            count += value
    return count

print(separate([[[-13, 7], 90], 6, [1, 100], 8, 6]))
print(Minimum([[[-13, 7], 90], 6, [1, 100], 8, 6]))
print(recursive(1,[1,3,1,333,44,[1,33]]))

#7
def separate(List):
    LIST2 = []
    for i in List:
        if type(i) != type([]):
            LIST2.append(i)
        else:
            LIST2 += (separate(i))
    return(LIST2)
    
#8
def fib(n):
    List = [1,1]
    while len(List) < n:
        List.append(List[-1] + List[-2])
    return(List[n-1])
print(fib(200))

    
